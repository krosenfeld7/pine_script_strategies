// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© krosenfeld7

//@version=4
strategy("20 EMA + 50 EMA + Breakout Short Strategy (5M)", overlay = true, pyramiding = 0, 
         margin_long = 100, margin_short = 100, default_qty_type = strategy.percent_of_equity, 
         default_qty_value = 20, initial_capital = 2000, process_orders_on_close = true)

// Set the starting point for backtesting
start = input(title="Backtesting Start", type=input.time, defval=timestamp("1 Jan 2015"))
// Expiration time on orders
maxTimeOpen = input(title="Order Expiration", type=input.integer, defval=100, minval=1)
useAtr = input(title="Use ATR?", type=input.bool, defval=false)
lookback = input(title="Pivot Lookback", type=input.integer, minval=1, defval=7)

// Algorithm / Strategy Goes here
// Set short variables to execute positions below
// Lengths for the pivots
// 20 period EMA
len1 = input(20, minval=1, title="Short EMA Length")
src1 = input(close, title="Short EMA Source")
ema20 = ema(src1, len1)
plot(ema20, title="Short EMA", color=color.white, linewidth=3)

// 50 period EMA
len2 = input(50, minval=1, title="Long EMA Length")
src2 = input(close, title="Long EMA Source")
ema50 = ema(src2, len2)
plot(ema50, title="Long EMA", color=color.blue, linewidth=3)

emaLong = ema20 > ema50
emaShort = ema50 > ema20

pivotHigh = pivothigh(lookback, lookback)
pivotLow = pivotlow(lookback, lookback)

var float pivotHighPrice = na
var float pivotLowPrice = na

if not na(pivotHigh)
    pivotHighPrice := pivotHigh
if not na(pivotLow)
    pivotLowPrice := pivotLow

highestCloseBelow50 = true
highestCloseAbove20 = false

for i = 0 to barssince(pivotLow)
    if close[i] > ema50[i]
        highestCloseBelow50 := false
    if close[i] > ema20[i]
        highestCloseAbove20 := true
        
bearishBreakoutValid = close < pivotLowPrice

tempShort = emaShort and highestCloseBelow50 and highestCloseAbove20 and bearishBreakoutValid and close < open
short = tempShort ? 1 : 0

// Average True Range
length = input(title="ATR Length", defval=14, minval=1)
atrMultiplier = input(title="ATR Multiplier", type=input.float, defval=1, minval=0.1)
atr = atr(length)

shortProfitPercent = input(title = "Profit %",
     type = input.float, minval = 0.0, step = 0.1, defval = 10) / 100
shortLossPercent = input(title = "Loss %",
     type = input.float, minval = 0.0, step = 0.1, defval = 10) / 100

// Calculating exact prices for stop loss and exit prices
shortExitPercentPrice = strategy.position_avg_price * (1 - shortProfitPercent)
shortStopPercentPrice = strategy.position_avg_price * (1 + shortLossPercent)

// Profit & Loss via ATR
shortExitPrice = useAtr ? strategy.position_avg_price - atr * atrMultiplier : shortExitPercentPrice
shortStopPrice = useAtr ? strategy.position_avg_price + atr * atrMultiplier : shortStopPercentPrice

// Plotting profit / loss targets
plot(series = (strategy.position_size < 0) ? shortExitPrice : na, color = #33b802, style = plot.style_linebr, transp = 0, linewidth = 3, title = "Short Target")
plot(series = (strategy.position_size < 0) ? shortStopPrice : na, color = #ff0900, style = plot.style_linebr, transp = 0, linewidth = 3, title = "Short Stop Loss")

// Submit entry orders
if time >= start
    strategy.entry(id = "Short", long = strategy.short, comment = "Short Open", when = short)

// Submit exit orders
strategy.exit(id = "Short", limit = shortExitPrice, stop = shortStopPrice, comment = "Short Close", when = strategy.position_size < 0)
strategy.close(id = "Short", comment = "Expired: >" + tostring(maxTimeOpen), when = (barssince(change(strategy.opentrades)) + 1) >= maxTimeOpen)
