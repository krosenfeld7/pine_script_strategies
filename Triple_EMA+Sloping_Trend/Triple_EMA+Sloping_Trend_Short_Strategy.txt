// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© krosenfeld7

//@version=4
strategy("Triple EMA + Sloping Trend Short Strategy", overlay = true, pyramiding = 0, 
         margin_long = 100, margin_short = 100, 
         default_qty_type = strategy.percent_of_equity, 
         default_qty_value = 20, initial_capital = 2000, 
         process_orders_on_close = true)

// Set the starting point for backtesting
start = input(title = "Backtesting Start", type = input.time,
     defval = timestamp("1 Jan 2015"))
maxTimeOpen = input(title = "Order Expiration", type = input.integer,
     defval = 100, minval = 1)
tpSlStrategy = input(title = "Take Profit Strategy", type = input.string,
     defval = "Percent", options = ["Percent", "ATR"])
trailingStop = input(title = "Trailing Stop", type = input.string,
     defval = "Fixed", options = ["Fixed", "Trail"])

// ATR For Stop Loss
atrLength = input(title = "ATR SL Length", defval = 14,
     minval = 1)
atrMultiplier = input(title = "ATR Multiplier", type = input.float, 
     defval = 1, minval = 0.1)
riskLevel = input(title = "Risk Level", type = input.float, 
     defval = 1, minval = 0.1)

shortProfitPercent = input(title = "Take Profit %",
     type = input.float, minval = 0.0, step = 0.1, defval = 10) / 100
shortLossPercent = input(title = "Stop Loss %",
     type = input.float, minval = 0.0, step = 0.1, defval = 10) / 100

// Algorithm / Strategy Goes here
// Set short variables to execute positions below
emaShort    = input(title = "Short EMA Length", type = input.integer, defval = 50,  minval = 1)
emaShortSrc = input(title = "Short EMA Src",    type = input.source,  defval = close)
emaMed      = input(title = "Med EMA Length",   type = input.integer, defval = 100, minval = 1)
emaMedSrc   = input(title = "Med EMA Src",      type = input.source,  defval = close)
emaLong     = input(title = "Long EMA Length",  type = input.integer, defval = 150, minval = 1)
emaLongSrc  = input(title = "Long EMA Src",     type = input.source,  defval = close)
slopeRange  = input(title = "Slope Range",      type = input.integer, defval = 10,  minval = 1)
slopeDegLim = input(title = "Slope Angle Limit",type = input.float,   defval = 30,  minval = 1)

ema50  = ema(close, 50)
ema100 = ema(close, 100)
ema150 = ema(close, 150)

plot(ema50, color=color.blue, linewidth = 2)
plot(ema100, color=color.yellow, linewidth = 2)
plot(ema150, color=color.red, linewidth = 2)

calculate_slope(_range, _src) =>
    _y = _src - nz(_src[_range])
    _angle = atan(_y/_range)
    _angle

calculate_avg_slope(_range, _src) =>
    _total = 0.0
    for i = 1 to _range
        _total += calculate_slope(i, _src)
    
    _total / _range

slopeEMA1 = todegrees(calculate_avg_slope(slopeRange, ema50))
slopeEMA2 = todegrees(calculate_avg_slope(slopeRange, ema100))
slopeEMA3 = todegrees(calculate_avg_slope(slopeRange, ema150))

// Bullish
// 50 MA > 100 MA > 200 MA all with slopes > 30 deg
// closes below 50 EMA, but above 100 EMA, long when candle closes above 50 EMA

closeBelow50  = crossunder(close, ema50)
closeBelow100 = crossunder(close, ema100)
closeBelow150 = crossunder(close, ema150)

correctBullOrder = barssince(closeBelow50) < barssince(closeBelow100)

tempLongPos = ema50 > ema100 and ema100 > ema150 and correctBullOrder and crossover(close, ema50)

emaLongPos = barssince(tempLongPos) < barssince(close < ema100) and barssince(tempLongPos) < barssince(close < ema150)

slopeLongPos = slopeEMA1 > slopeDegLim and slopeEMA2 > slopeDegLim and slopeEMA3 > slopeDegLim

// Bearish
// 50 MA < 100 MA < 200 MA all with slopes < -30 deg
// closes above, but below 100 EMA, short when candle closes below 50 EMA

closeAbove50  = crossover(close, ema50)
closeAbove100 = crossover(close, ema100)
closeAbove150 = crossover(close, ema150)

correctBearOrder = barssince(closeAbove50) < barssince(closeAbove100)

tempShortPos = ema50 < ema100 and ema100 < ema150 and correctBearOrder and crossunder(close, ema50)

emaShortPos = barssince(tempShortPos) < barssince(close > ema100) and barssince(tempShortPos) < barssince(close > ema150)

slopeShortPos =  slopeEMA1 < -slopeDegLim and slopeEMA2 < -slopeDegLim and slopeEMA3 < -slopeDegLim

// Computing Strategy
long  = emaLongPos  and slopeLongPos
short = emaShortPos and slopeShortPos

// End Algorithm

shortExitPrice = 0.0
shortStopPrice = 0.0

shortExitPercentPrice = strategy.position_avg_price * (1 - 
     (shortProfitPercent * riskLevel))
shortStopPercentPrice = strategy.position_avg_price * (1 + 
     shortLossPercent)

// Profit & Loss via ATR
atr = atr(atrLength)

atr := valuewhen(strategy.position_size == 0, atr, 0)

shortExitAtrPrice = strategy.position_avg_price - (atr * 
     atrMultiplier * riskLevel)
shortStopAtrPrice = strategy.position_avg_price + (atr * 
     atrMultiplier)

if tpSlStrategy == "Percent"
    shortExitPrice := shortExitPercentPrice
    
    if trailingStop == "Fixed"
        shortStopPrice := shortStopPercentPrice
    else if trailingStop == "Trail"
        stopValue      = close * (1 + shortLossPercent)
        shortStopPrice := (strategy.position_size < 0) ? 
             min(stopValue, shortStopPrice[1]) : 999999

else if tpSlStrategy == "ATR"
    if strategy.position_size < 0
        shortExitPrice := shortExitAtrPrice
        
    if trailingStop == "Fixed"
        shortStopPrice := shortStopAtrPrice
    else if trailingStop == "Trail"
        stopValue      = close + (atr * atrMultiplier)
        shortStopPrice := (strategy.position_size < 0) ? 
             min(stopValue, shortStopPrice[1]) : 999999

// Plotting profit / loss targets
plot(series = (strategy.position_size < 0) ? shortExitPrice : na, 
     color = color.green, style = plot.style_linebr, linewidth = 3, 
     title = "Short Target")
plot(series = (strategy.position_size < 0) ? shortStopPrice : na, 
     color = color.red, style = plot.style_linebr, linewidth = 3, 
     title = "Short Stop Loss")

// Submit entry orders
if time >= start
    strategy.entry(id = "Short", long = strategy.short, 
         comment = "Short Open", when = short)

// Submit exit orders
strategy.exit(id = "Short", limit = shortExitPrice, stop = shortStopPrice, 
     comment = "Short Close", when = strategy.position_size < 0)
strategy.close(id = "Short", comment = "Expired: >" + tostring(maxTimeOpen), 
     when = (barssince(change(strategy.opentrades)) + 1) >= maxTimeOpen)
