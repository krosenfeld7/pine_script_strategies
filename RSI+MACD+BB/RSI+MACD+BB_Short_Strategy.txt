// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© krosenfeld7

//@version=4
strategy("RSI + MACD + BB Short Strategy (Not Good)", overlay = true, pyramiding = 0, 
         margin_long = 100, margin_short = 100, default_qty_type = strategy.percent_of_equity, 
         default_qty_value = 20, initial_capital = 2000, process_orders_on_close = true)

// Set the starting point for backtesting
start = input(title="Backtesting Start", type=input.time, defval=timestamp("1 Jan 2015"))
// Expiration time on orders
maxTimeOpen = input(title="Order Expiration", type=input.integer, defval=100, minval=1)
useAtr = input(title="Use ATR?", type=input.bool, defval=false)

// Algorithm / Strategy Goes here
// Set short variables to execute positions below
// RSI Section
len = input(14, minval = 1, title = "RSI Length")
src = input(close, "RSI Source", type = input.source)
up = rma(max(change(src), 0), len)
down = rma(-min(change(src), 0), len)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))

// MACD Section
// Getting inputs
fast_length = input(title = "MACD Fast Length", type = input.integer, defval = 12)
slow_length = input(title = "MACD Slow Length", type = input.integer, defval = 26)
src2 = input(title = "MACD Source", type = input.source, defval = close)
signal_length = input(title = "Signal Smoothing", type = input.integer, minval = 1, maxval = 50, defval = 9)
sma_source = input(title = "Simple MA (Oscillator)", type = input.bool, defval = false)
sma_signal = input(title = "Simple MA (Signal Line)", type = input.bool, defval = false)
// Calculating
fast_ma = sma_source ? sma(src2, fast_length) : ema(src2, fast_length)
slow_ma = sma_source ? sma(src2, slow_length) : ema(src2, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal ? sma(macd, signal_length) : ema(macd, signal_length)
hist = macd - signal
value = (hist >= 0 ? (hist[1] < hist ? 1 : 3) : (hist[1] < hist ? 2 : 4))

// Bollinger Bands Section
bollinger_avg_len = 50
length = input(20, minval = 1)
src3 = input(close, title = "BB Source")
mult = input(2.0, minval = 0.001, maxval = 50, title = "BB StdDev")
basis = sma(src3, length)
dev = mult * stdev(src3, length)
upper = basis + dev
lower = basis - dev

band_width_avg = 0.0
for i = 0 to bollinger_avg_len
    band_width_avg += 2 * dev[i]

band_width_avg /= bollinger_avg_len
band_consolidating = band_width_avg > 2 * dev

cross50over = crossover(rsi, 50)
cross50under = crossunder(rsi, 50)
cross30over = crossover(rsi, 30)

validShortRSI = barssince((cross50over and barssince(cross50under) > barssince(cross30over))) == 0
shortRSI = (barssince(validShortRSI) < barssince(cross50under)) and (rsi > 50) and not cross50under
short = (close < open and value[1] == 1 and value == 3 and shortRSI and band_consolidating) ? 1 : 0

// Average True Range
atrLength = input(title="ATR Length", defval=14, minval=1)
atrMultiplier = input(title="ATR Multiplier", type=input.float, defval=1, minval=0.1)
atr = atr(atrLength)

shortProfitPercent = input(title = "Profit %",
     type = input.float, minval = 0.0, step = 0.1, defval = 10) / 100
shortLossPercent = input(title = "Loss %",
     type = input.float, minval = 0.0, step = 0.1, defval = 10) / 100

// Calculating exact prices for stop loss and exit prices
shortExitPercentPrice = strategy.position_avg_price * (1 - shortProfitPercent)
shortStopPercentPrice = strategy.position_avg_price * (1 + shortLossPercent)

// Profit & Loss via ATR
shortExitPrice = useAtr ? strategy.position_avg_price - atr * atrMultiplier : shortExitPercentPrice
shortStopPrice = useAtr ? strategy.position_avg_price + atr * atrMultiplier : shortStopPercentPrice

// Plotting profit / loss targets
plot(series = (strategy.position_size < 0) ? shortExitPrice : na, color = #33b802, style = plot.style_linebr, transp = 0, linewidth = 3, title = "Short Target")
plot(series = (strategy.position_size < 0) ? shortStopPrice : na, color = #ff0900, style = plot.style_linebr, transp = 0, linewidth = 3, title = "Short Stop Loss")

// Submit entry orders
if time >= start
    strategy.entry(id = "Short", long = strategy.short, comment = "Short Open", when = short)

// Submit exit orders
strategy.exit(id = "Short", limit = shortExitPrice, stop = shortStopPrice, comment = "Short Close", when = strategy.position_size < 0)
strategy.close(id = "Short", comment = "Expired: >" + tostring(maxTimeOpen), when = (barssince(change(strategy.opentrades)) + 1) >= maxTimeOpen)
