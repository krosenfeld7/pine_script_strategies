// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© krosenfeld7

//@version=4
study("RSI + Slow Stochastic + MACD", shorttitle="RSI + SS + MACD", overlay=false)

rsiOver = input(title="RSI Highline", type=input.integer, defval=70, minval=70, maxval=100)
rsiMid = input(title="RSI Midline", type=input.integer, defval=50, minval=30, maxval=70)
rsiUnder = input(title="RSI Lowline", type=input.integer, defval=30, maxval=30, minval=0)
maxDelay = input(title="Label+Indicator Delay", type=input.integer, defval=5, minval=0)
barsback = input(title="Lookback", type=input.integer, defval=3, minval=1)

// RSI Section
len1 = input(14, minval=1, title="RSI Length")
src1 = input(close, "RSI Source", type = input.source)
up = rma(max(change(src1), 0), len1)
down = rma(-min(change(src1), 0), len1)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
plot(rsi, "RSI", color=color.white, transp=0, linewidth=2)

band80 = hline(rsiOver + 10, "Upper Band", color=color.white, linewidth=1, linestyle=hline.style_dashed)
band50 = hline(rsiMid, "Middle Band", color=color.purple, linewidth=1, linestyle=hline.style_solid)
band20 = hline(rsiUnder - 10, "Lower Band", color=color.white, linewidth=1, linestyle=hline.style_dashed)
band70 = hline(rsiOver, "Upper Band", color=color.white, linewidth=1, linestyle=hline.style_dashed)
band30 = hline(rsiUnder, "Lower Band", color=color.white, linewidth=1, linestyle=hline.style_dashed)
fill(band50, band70, color=color.white, transp=90, title="Background")
fill(band30, band50, color=color.white, transp=90, title="Background")
fill(band70, band80, color=color.white, transp=80, title="Background")
fill(band20, band30, color=color.white, transp=80, title="Background")
fill(band80, hline(100, color=color.red, linestyle=hline.style_solid), color=color.red, transp=75, title="Background")
fill(hline(0, color=color.green, linestyle=hline.style_solid), band20, color=color.green, transp=75, title="Background")

rsiLong = rsi > rsiMid
rsiShort = rsi < rsiMid

rsiLongExitCondition = rsi > rsiOver
rsiShortExitCondition = rsi < rsiUnder

// Slow Stochastic
smoothK = input(14, minval=1), smoothD = input(3, minval=1)
k = sma(stoch(close, high, low, smoothK), 3)
d = sma(k, smoothD)
plot(k, color=color.blue, transp=0, linewidth=2)
plot(d, color=color.orange, transp=0, linewidth=2)

stoLong = k < rsiUnder and d < rsiUnder and crossover(k, d)
stoShort = k > rsiOver and d > rsiOver and crossunder(k, d)

stoLongExitCondition = k > rsiOver and d > rsiOver
stoShortExitCondition = k < rsiUnder and d < rsiUnder

// MACD Section
fast_length = input(title="MACD Fast Length", type=input.integer, defval=12)
slow_length = input(title="MACD Slow Length", type=input.integer, defval=26)
src = input(title="MACD Source", type=input.source, defval=close)
signal_length = input(title="Signal Smoothing", type=input.integer, minval = 1, maxval = 50, defval = 9)
sma_source = input(title="Simple MA (Oscillator)", type=input.bool, defval=false)
sma_signal = input(title="Simple MA (Signal Line)", type=input.bool, defval=false)

// Calculating
fast_ma = sma_source ? sma(src, fast_length) : ema(src, fast_length)
slow_ma = sma_source ? sma(src, slow_length) : ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal ? sma(macd, signal_length) : ema(macd, signal_length)

plottableMacd = (macd / 10000) * 100 + 50
plottableSignal = (signal / 10000) * 100 + 50

plot(plottableMacd, title="MACD", color=color.green, transp=0, linewidth=2)
plot(plottableSignal, title="Signal", color=color.red, transp=0, linewidth=2)

macdLong = crossover(macd, signal)
macdShort = crossunder(macd, signal)

if barstate.isrealtime and (rsi < rsiUnder or (k < rsiUnder and d < rsiUnder))
    label.new(bar_index, 5, text="Oversold", color=color.new(color.white, transp=0), style=label.style_label_up)
else if barstate.isrealtime and (rsi > rsiOver or (k > rsiOver and d > rsiOver))
    label.new(bar_index, 95, text="Overbought", color=color.new(color.white, transp=0))

// Bullish (Long)
// RSI is above 50, trend is upwards
// Stochastic is in Oversold, cross up
// MACD crossing up
// Stop loss at last pivot low
// Exit when stochastic and rsi are overbought

longStopLoss = lowest(low, barsback)

tempLong = barssince(rsiLong) < maxDelay and barssince(stoLong) < maxDelay and barssince(macdLong) < maxDelay
longExitCondition = rsiLongExitCondition and stoLongExitCondition
long = tempLong ? 1 : 0

// Bearish (Short)
// RSI is below 50, trend is downwards
// Stochastic is in Overbought, cross down
// MACD crossing down
// Stop loss at last pivot high
// Exit when stochastic and rsi are oversold

shortStopLoss = highest(high, barsback)

tempShort = barssince(rsiShort) < maxDelay and barssince(stoShort) < maxDelay and barssince(macdShort) < maxDelay
shortExitCondition = rsiShortExitCondition and stoShortExitCondition
short = tempShort ? 1 : 0

if long and not long[1]
    label.new(bar_index, 5, text="Long", color=color.green, style=label.style_label_up)
if short and not short[1]
    label.new(bar_index, 95, text="Short", color=color.red, style=label.style_label_down)

// Alerts
alertcondition(long, title = "Long Signal", message = "Long @ {{timenow}}: {{ticker}} -> {{interval}}: {{close}}")
alertcondition(short, title = "Short Signal", message = "Short @ {{timenow}}: {{ticker}} -> {{interval}}: {{close}}")
